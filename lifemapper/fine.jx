{
    "rules": [
        {
            "command": format(
                "%s points_%s.csv outputs_%s.csv",
                PROCESS_POINTS, t, t
            ),
            "outputs": [
                format("outputs_%s.csv", t),
            ],
            "inputs": [
                format("points_%s.csv", t),
                PROCESS_POINTS,
            ],
        } for t in TAXA, {
            "command": format(
                "%s && mkdir -p outputs_%s && %s -cp %s density.MaxEnt -s outputs_%s.csv -e %s -o outputs_%s nowarnings nocache autorun -z; touch outputs_%s/%s.lambdas && cp outputs_%s/%s.lambdas outputs_%s_%s.lambdas",
                FIXREF,
                t,
                JAVA,
                MAXENT,
                t,
                MODEL,
                t,
                t,
                t,
                t,
                t,
                t,
                t
            ),
            "inputs": [
                MAXENT,
                FIXREF,
                #JAVA,
                "alt." + MODEL,
                format("bio%d.%s", i, MODEL) for i in range(1,20),
                format("outputs_%s.csv", t),
            ],
            "outputs": [
                format("outputs_%s_%s.lambdas", t, t),
            ],
        } for t in TAXA, {
            "command": format(
                "%s && %s -cp %s density.Project outputs_%s_%s.lambdas %s outputs_%s_%s.asc nowarnings nocache autorun -z; touch outputs_%s_%s.asc; touch outputs_%s_%s_clamping.asc",
                FIXREF,
                JAVA,
                MAXENT,
                t,
                t,
                p,
                t,
                basename(p),
                t,
                basename(p),
                t,
                basename(p)
            ),
            "outputs": [
                format("outputs_%s_%s.asc", t, basename(p)),
                format("outputs_%s_%s_clamping.asc", t, basename(p))
            ],
            "inputs": [
                FIXREF,
                MAXENT,
                #JAVA,
                "alt." + MODEL,
                format("bio%d.%s", i, MODEL) for i in range(1,20),
                "alt." + p,
                format("bio%d.%s", i, p) for i in range(1,20),
                format("outputs_%s_%s.lambdas", t, t),
            ]
        } for t in TAXA for p in PROJECTIONS,
    ],
}
